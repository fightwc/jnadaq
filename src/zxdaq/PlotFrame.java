/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package zxdaq;

import java.awt.Color;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.LinkedList;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import javax.swing.JFileChooser;
import jna.NiDaqException;
import org.knowm.xchart.XChartPanel;
import org.knowm.xchart.XYChart;
import org.knowm.xchart.XYChartBuilder;
import org.knowm.xchart.XYSeries;
import org.knowm.xchart.style.markers.SeriesMarkers;

/**
 *
 * @author Tony Lab
 */
public class PlotFrame extends javax.swing.JFrame {

    private XYChart chart = new XYChartBuilder().width(800).height(560).build();
    final private String dataNameA = "data_A";
    final private String dataNameB = "data_B";
    final private String dataNameC = "data_C";
    final private LinkedList<Double> ydata_A = new LinkedList<>();
    final private LinkedList<Double> ydata_A_full = new LinkedList<>();
    final private LinkedList<Double> ydata_B = new LinkedList<>();
    final private LinkedList<Double> ydata_B_full = new LinkedList<>();
    final private LinkedList<Double> ydata_C = new LinkedList<>();
    final private LinkedList<Double> ydata_C_full = new LinkedList<>();
    private ScheduledExecutorService ses = new ScheduledThreadPoolExecutor(1);
    private ScheduledFuture sf;
    final private ZxDaq zdaq = new ZxDaq();
    private volatile int counter;
    private boolean completelyNew = true;

    /**
     * Creates new form PlotFrame
     */
    public PlotFrame() {
        chart.getStyler().setPlotMargin(2)
                .setChartBackgroundColor(Color.white).setLegendVisible(false);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlPlot = new XChartPanel<XYChart>(chart);
        updownPanel = new javax.swing.JPanel();
        pnlBtns = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtLen = new javax.swing.JTextField();
        btnStart = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnClr = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        txtDev1 = new javax.swing.JTextField();
        txtDev2 = new javax.swing.JTextField();
        txtDev3 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ZX DAQ 0.53");

        javax.swing.GroupLayout pnlPlotLayout = new javax.swing.GroupLayout(pnlPlot);
        pnlPlot.setLayout(pnlPlotLayout);
        pnlPlotLayout.setHorizontalGroup(
            pnlPlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 720, Short.MAX_VALUE)
        );
        pnlPlotLayout.setVerticalGroup(
            pnlPlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 236, Short.MAX_VALUE)
        );

        getContentPane().add(pnlPlot, java.awt.BorderLayout.CENTER);

        updownPanel.setLayout(new java.awt.GridLayout(2, 1));

        pnlBtns.setPreferredSize(new java.awt.Dimension(800, 32));
        pnlBtns.setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Length(s) ");
        jPanel1.add(jLabel1, new java.awt.GridBagConstraints());

        txtLen.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtLen.setText("600");
        txtLen.setPreferredSize(new java.awt.Dimension(40, 21));
        jPanel1.add(txtLen, new java.awt.GridBagConstraints());

        pnlBtns.add(jPanel1);

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });
        pnlBtns.add(btnStart);

        btnStop.setText("Stop");
        btnStop.setEnabled(false);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });
        pnlBtns.add(btnStop);

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        pnlBtns.add(btnSave);

        btnClr.setText("Clear");
        btnClr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClrActionPerformed(evt);
            }
        });
        pnlBtns.add(btnClr);

        updownPanel.add(pnlBtns);

        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        txtDev1.setText("/Dev1/ai0");
        txtDev1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDev1ActionPerformed(evt);
            }
        });
        jPanel3.add(txtDev1);

        txtDev2.setText("/Dev1/ai1");
        txtDev2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDev2ActionPerformed(evt);
            }
        });
        jPanel3.add(txtDev2);

        txtDev3.setText("/Dev1/ai2");
        jPanel3.add(txtDev3);

        updownPanel.add(jPanel3);

        getContentPane().add(updownPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnClrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClrActionPerformed
        ydata_A.clear();
        ydata_A_full.clear();
        ydata_B.clear();
        ydata_B_full.clear();
        ydata_C.clear();
        ydata_C_full.clear();
        
        if (!chart.getSeriesMap().isEmpty()) {
            chart.removeSeries(dataNameA);
            chart.removeSeries(dataNameB);
            chart.removeSeries(dataNameC);
        }
        pnlPlot.repaint();
        pnlPlot.revalidate();
    }//GEN-LAST:event_btnClrActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        try {
            int t = Integer.parseInt(txtLen.getText());
            if (t > 0 && t < 86400) {
                txtLen.setEditable(false);
                btnStart.setEnabled(false);
                btnClr.setEnabled(false);
                btnStop.setEnabled(true);
                counter = 0;
                ydata_A.clear();
                ydata_A_full.clear();
                ydata_B.clear();
                ydata_B_full.clear();
                ydata_C.clear();
                ydata_C_full.clear();
                zdaq.initTask(completelyNew, txtDev1.getText(), txtDev2.getText(), txtDev3.getText());
                completelyNew = false;
                sf = ses.scheduleWithFixedDelay(new Update(), 500, 150, TimeUnit.MILLISECONDS);
            }
        } catch (NiDaqException | NumberFormatException e) {
            System.out.println(e.toString());
        }


    }//GEN-LAST:event_btnStartActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        try {
            if (null != sf) {
                sf.cancel(true);
            }
            zdaq.stopTask();
            txtLen.setEditable(true);
            btnClr.setEnabled(true);
            btnStop.setEnabled(false);
            btnStart.setEnabled(true);

        } catch (NiDaqException e) {
            System.out.println(e.toString());
        }
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (ydata_A_full.size() > 0 && ydata_B_full.size() > 0 && ydata_C_full.size() > 0) {
            LinkedList<LinkedList<Double>> save = new LinkedList<>();
            save.add(ydata_A_full);
            save.add(ydata_B_full);
            save.add(ydata_C_full);

            JFileChooser fc = new JFileChooser();
            fc.setDialogTitle("File to save");
            if (fc.showSaveDialog(jPanel1) == JFileChooser.APPROVE_OPTION) {
                File f = fc.getSelectedFile();
                try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(f))) {
                    out.writeObject(save);
                } catch (IOException e) {
                    System.out.println(e.toString());
                }
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtDev1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDev1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDev1ActionPerformed

    private void txtDev2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDev2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDev2ActionPerformed

    double[] splitSamples(double[] in, int start, int end) {
        double[] rtn = new double[end - start];
        System.arraycopy(in, start, rtn, 0, end - start);
        return rtn;
    }

    private class Update implements Runnable {

        @Override
        public void run() {
            try {
                if (counter > (double) Integer.parseInt(txtLen.getText()) / ZxDaq.SAMP_INTERVAL) {
                    if (null != sf) {
                        sf.cancel(true);
                    }
                    zdaq.stopTask();
                } else {
                    counter++;
                    double[] data = zdaq.readAnalogueIn((int) (ZxDaq.SAMPLE_RATE * ZxDaq.SAMP_INTERVAL));
                    if (data != null) {
                        int perChannel = data.length / ZxDaq.CHANNEL_COUNT;
                        double[] dataA = splitSamples(data, 0, perChannel);
//                        System.out.println("A"+Arrays.toString(dataA));
                        for (double d : dataA) {
                            ydata_A.add(d);
                            ydata_A_full.add(d);
                        }
                        if(ydata_A.size()>400){
                            ydata_A.subList(0, ydata_A.size()-400).clear();
                        }

                        double[] dataB = splitSamples(data, perChannel, 2 * perChannel);
//                        System.out.println("B"+Arrays.toString(dataB));
                        for (double d : dataB) {
                            ydata_B.add(d);
                            ydata_B_full.add(d);
                        }
                        if(ydata_B.size()>400){
                            ydata_B.subList(0, ydata_B.size()-400).clear();
                        }
                        double[] dataC = splitSamples(data, 2 * perChannel, 3 * perChannel);
//                        System.out.println("C"+Arrays.toString(dataC));
                        for (double d : dataC) {
                            ydata_C.add(d);
                            ydata_C_full.add(d);
                        }
                        if(ydata_C.size()>400){
                            ydata_C.subList(0, ydata_C.size()-400).clear();
                        }

                        //TODO proper implement clear
                        if (chart.getSeriesMap().isEmpty()) {
                            XYSeries a = chart.addSeries(dataNameA, null, ydata_A, null);
                            XYSeries b = chart.addSeries(dataNameB, null, ydata_B, null);
                            XYSeries c = chart.addSeries(dataNameC, null, ydata_C, null);
                            a.setMarker(SeriesMarkers.NONE);
                            b.setMarker(SeriesMarkers.NONE);
                            c.setMarker(SeriesMarkers.NONE);
                        }
                        chart.updateXYSeries(dataNameA, null, ydata_A, null);
                        chart.updateXYSeries(dataNameB, null, ydata_B, null);
                        chart.updateXYSeries(dataNameC, null, ydata_C, null);
//                        System.out.println(counter + "," + ydata_A.size());
                        pnlPlot.repaint();
                        pnlPlot.revalidate();

                    } else {
                        System.out.println("Error");
                    }
                }
            } catch (NiDaqException e) {
                System.out.println(e.toString());
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlotFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlotFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlotFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlotFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlotFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClr;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel pnlBtns;
    private javax.swing.JPanel pnlPlot;
    private javax.swing.JTextField txtDev1;
    private javax.swing.JTextField txtDev2;
    private javax.swing.JTextField txtDev3;
    private javax.swing.JTextField txtLen;
    private javax.swing.JPanel updownPanel;
    // End of variables declaration//GEN-END:variables
}
